<chapter id="customizing" xreflabel="Customizing the Condor Roll">


<title>Customizing the Condor Roll</title>

<section id="customizing-condor" xreflabel="Customizing Condor">
<title>Customizing the Condor Roll</title>

<para>

This section describes the default Condor configuration and some simple
cusomizations that can be applied in Rocks with version &gt;= 5.4
</para>

<para>
By default, Condor execution daemons are only installed on Rocks
<emphasis>compute</emphasis> appliances. For Rocks 5.2 and newer, the Condor
roll makes use of <emphasis>attributes</emphasis>
to enable Condor to be installed on any appliance.
This may be particularly useful to groups who are including the Xen roll
and would like Condor to install on VM Container appliances. 
</para>

<para>
The basic customizations that can be applied without and scripting/programming
by setting global, appliance, or host attributes. Please see the
commands <computeroutput> rocks set attr help </computeroutput>
and
<computeroutput> rocks list attr help </computeroutput>

</para>

<para>

<table frame='all'><title>Attributes Used in Condor Roll</title>
<tgroup cols='2' align='left' colsep='1' rowsep='1'>
<thead>
<row>
  <entry align="center">Attibute Name</entry>
  <entry align="center">Description</entry>
</row>
</thead>
<tbody>
<row>
<entry>Condor_Client</entry>
<entry>
Enable/Disable Condor Client Installation on any particular Appliance or Host
</entry>
</row>
<row>
<entry>Condor_PasswordAuth </entry>
<entry>
 Use a shared pool password, instead of host-based 
authentication. Default: no. 
</entry>
</row>

<row>
<entry>Condor_HostAllow </entry>
<entry>
Comma separates list of allowed readers/writers for Condor. Translates to 
HOSTALLOW directive in Condor Configuration file.
</entry>
</row>


<row>
<entry>Condor_EnableMPI </entry>
<entry>
Configure a local scheduler for MPI Universe Support
</entry>
</row>
<row>
<entry>
Condor_Master
</entry>
<entry>
Redefine the Condor Master that nodes use
</entry>
</row>

<row>
<entry>
Condor_Network 
</entry>
<entry>
Define which network interface is used for Condor traffic. Default: frontends are set to public, clients are set to private.
</entry>
</row>

<row>
<entry>
Condor_PortHigh: 
</entry>
<entry>
Upper Port range that Condor will use to communicate among 
daemons. Removal of this Attribute will result in removal of the HIGHPORT entry in condor_config.local after syncing the configuration. Default: 50000
</entry>
</row>

<row>
<entry>
Condor_PortLow 
</entry>
<entry>
Lower Port range that Condor will use to communicate among 
daemons. Removal of this Attribute will result in removal of the LOWPORT entry in condor_config.local after syncing the configuration. Default: 40000
</entry>
</row>

</tbody>
</tgroup>
</table>

</para>

</section>

<!-- ***************************************************************** -->
<section id="condor-password-security" xreflabel="Condor Pool Password Security">
<title>Using a pool password to secure Condor Communications</title>
<para>
The default Rocks configuration is to use host-based authentication. This is a good and simple choice for a cluster with a private network.  With the Rocks 5.4 version of the Condor Roll, it is straightforward to set up a "Pool Password"
that utilizes a shared secret among pool members.  This is especially useful
when allowing remote systems to report directly to the Condor collector on your cluster.  The EC2 Roll can utilize a pool password for a higher security.
</para>
<para>
The following, straightforward will create, copy and enable a 
system-wide shared-secret pool password.
<orderedlist> 
<listitem> 
<para>
Create a pool password. Use  
<computeroutput> rocks create condor password</computeroutput>
</para>
</listitem>
<listitem> 
<para>
Enable pool password security. Use <computeroutput> rocks set attr Condor_Password yes</computeroutput>
</para>
</listitem>
<listitem> 
<para>
Reconfigure Condor Daemons and copy new pool password. Use
<computeroutput> rocks sync host condor syncpassword=yes localhost compute
</computeroutput>
</para> 
</listitem>
</orderedlist>
</para> 


</section>
<section id="config-examples-condor" xreflabel="Condor Configuration Examples">
<title>Examples of Condor Configuration</title>
<para>
The following are short examples of how to customize Condor using 
Rocks commands.

<itemizedlist>

<listitem>
<para>
Enable Condor Client on all VM-Containers Appliances:
<computeroutput>rocks add appliance attr vm-container Condor_Client true </computeroutput>
</para>
</listitem>

<listitem>
<para>
Disable Condor on particular node:
<computeroutput>rocks set host attr compute-0-0 Condor_Client false </computeroutput>
</para>
</listitem>


<listitem>
<para>
Define a New Condor Master:
<computeroutput>rocks set attr Condor_Master central-master.my.edu </computeroutput>
</para>
</listitem>


</itemizedlist>

</para>

</section> 

<section id="reconfiguring-condor" xreflabel="Reconfiguring Condor">
<title>Reconfiguring Condor after Installation </title>
<para>
The configuration of Condor is done during the install, the resulting 
configuration files are located in /opt/condor/etc. To reconfigure Condor 
on a node,  make appropriate attribute using the commands above  and then run
<screen>
# rocks sync host condor &lt;hostname&gt;
</screen>
</para>
<para>
This will rewrite the condor_config.local on the file and then calls the Condor
command <computeroutput>/opt/condor/sbin/condor_reconfigure</computeroutput>
</para>

<note>
<para>
To view the contents of the condor_config.local before making changes, use
<computeroutput>rocks report host condor config &lt;hostname&gt;</computeroutput>
</para>
</note>


<para>
To find information about administrating  and using Condor Pools
please see the original Condor manual at <ulink
url="http://www.cs.wisc.edu/condor/manual">Condor
manuals</ulink> or <ulink url="condor-Manual"> locally </ulink>.
</para>

</section>

<!-- ***************************************************************** -->
<section id="condor-advanced-configuration" xreflabel="Making Deeper Changes">
<title>Programatically changing the Contents of condor_config.local</title>
<para>
Condor configuration is localized into /opt/condor/etc/condor_config.local.
This file is generated programatically from the output of 
<computeroutput>rocks report host condor config &lt;hostname&gt;
</computeroutput>.
</para>
<para>
The command <computeroutput>rocks report host condor config</computeroutput>
is defined by the Condor roll and is written in Python. This report command is 
extensible through Rocks command plugins. 
</para>
<para>
To see a sample Condor plugin, 
view the file in location
<computeroutput>
/opt/rocks/lib/python2.4/site-packages/rocks/commands/report/host/condor/config/plugin_sample.py
</computeroutput>, which is reproduced here.
<screen>
# $Id: customizing.sgml,v 1.7 2010/10/26 16:44:00 phil Exp $
import rocks.commands

class Plugin(rocks.commands.Plugin):

	def provides(self):
		return 'sample'

	def run(self, argv):
		# Argv contains the hostname and the in memory key-value store
	        # that is eventually written to 
		# /opt/condor/etc/condor_config.local
		# plugins can add/change/remove keys from the store

		# 1. Get the hostname and the key-value store, which
		#    is a python dictionary 
		host, kvstore = argv 

		# The following would add CONDOR_SAMPLE=Sample Plugin
		# the key = value dictionary (kvstore)  that is written out
		#
		# Example 1. Read an attribute from the database and set 
		# the values
		value = self.db.getHostAttr(host, 'Condor_HostAllow')
		kvstore['CONDOR_SAMPLE'] = value 
		
		# Example 2. Set the key CONDOR_SAMPLE to the hostname 
		kvstore['CONDOR_SAMPLE'] = host 

		# Example 3. Remove a key from the dictionary
		if 'CONDOR_SAMPLE' in kvstore:
			del kvstore['CONDOR_SAMPLE']

RollName = "condor"
</screen>
</para>

<para>
Users/Roll Developers can add their own plugins for the 
"report host condor config" command to overwrite, add, and/or delete
key,value pairs that are written into /opt/condor/etc/condor_config.local.
</para>
<para>
In the above code sample, the Condor report command driver passes
the hostname and the dictionary of already defined key,value pairs
(kvstore in the sample code).  The sample code shows several different 
examples of changing the key 'CONDOR_SAMPLE'.
</para>

<para>
Plugins are written in Python, are called in random order,
 and must be named "plugin_&lt;name&gt;.py".  
</para>
<para>
Plugins also enable any 
desired configurations to be properly applied with the command
<computeroutput>
rocks sync host condor config
</computeroutput>.
</para>
</section>
</chapter>

